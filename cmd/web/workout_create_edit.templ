package web

import (
    "github.com/strangecousinwst/goworkout/internal/store"
    "strconv"
)

templ WorkoutForm(workout *store.Workout) {
    @Base() {
        <div class="space-y-6">
            <div class="flex items-center mb-6">
                <a href="/workouts" class="mr-4 text-blue-500 hover:text-blue-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                    </svg>
                </a>
                if workout.ID == 0 {
                    <h1 class="text-2xl font-bold text-gray-800">Create New Workout</h1>
                } else {
                    <h1 class="text-2xl font-bold text-gray-800">Edit Workout</h1>
                }
            </div>

            <div class="bg-white rounded-lg shadow-md p-6">
                <form 
                    if workout.ID == 0 {
                        hx-post="/api/v1/workouts"
                        hx-target="body"
                        hx-push-url="/workouts"
                    } else {
                        hx-put={ "/api/v1/workouts/" + strconv.FormatInt(int64(workout.ID), 10) }
                        hx-target="body"
                        hx-push-url={ "/workouts/" + strconv.FormatInt(int64(workout.ID), 10) }
                    }
                    class="space-y-6">

                    <div class="space-y-1">
                        <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
                        <input 
                            type="text" 
                            id="title" 
                            name="title" 
                            required
                            if workout.ID != 0 {
                                value={ workout.Title }
                            }
                            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                        />
                    </div>

                    <div class="space-y-1">
                        <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                        <textarea 
                            id="description" 
                            name="description" 
                            rows="3" 
                            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                        >
                            if workout.ID != 0 {
                                { workout.Description }
                            }
                        </textarea>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div class="space-y-1">
                            <label for="durationMinutes" class="block text-sm font-medium text-gray-700">Duration (minutes)</label>
                            <input 
                                type="number" 
                                id="durationMinutes" 
                                name="durationMinutes" 
                                required
                                min="1"
                                if workout.ID != 0 {
                                    value={ strconv.Itoa(workout.DurationMinutes) }
                                }
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                            />
                        </div>
                        <div class="space-y-1">
                            <label for="caloriesBurned" class="block text-sm font-medium text-gray-700">Calories Burned</label>
                            <input 
                                type="number" 
                                id="caloriesBurned" 
                                name="caloriesBurned" 
                                required
                                min="0"
                                if workout.ID != 0 {
                                    value={ strconv.Itoa(workout.CaloriesBurned) }
                                }
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                            />
                        </div>
                    </div>

                    <div class="space-y-4">
                        <div class="flex justify-between items-center">
                            <h3 class="text-lg font-medium text-gray-900">Exercises</h3>
                            <button 
                                type="button"
                                id="add-exercise"
                                class="inline-flex items-center rounded-md border border-transparent bg-blue-100 px-3 py-2 text-sm font-medium text-blue-700 hover:bg-blue-200"
                            >
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                </svg>
                                Add Exercise
                            </button>
                        </div>

                        <div id="exercises-container" class="space-y-4">
                            if workout.ID != 0 && len(workout.Entries) > 0 {
                                for i, entry := range workout.Entries {
                                    @ExerciseEntry(i, &entry)
                                }
                            } else {
                                @ExerciseEntry(0, nil)
                            }
                        </div>
                    </div>

                    <div class="flex justify-end">
                        <button 
                            type="submit" 
                            class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        >
                            if workout.ID == 0 {
                                Create Workout
                            } else {
                                Save Changes
                            }
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <script>
            document.getElementById('add-exercise').addEventListener('click', function() {
                const container = document.getElementById('exercises-container');
                const exerciseCount = container.childElementCount;

                // Create a new exercise entry
                const newExercise = document.createElement('div');
                newExercise.className = 'bg-gray-50 p-4 rounded-md relative exercise-entry';

                newExercise.innerHTML = `
                    <button type="button" class="absolute top-2 right-2 text-gray-400 hover:text-red-500" onclick="this.parentElement.remove()">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </button>
                    <div class="space-y-4">
                        <input type="hidden" name="entries[${exerciseCount}].orderIndex" value="${exerciseCount}" />

                        <div class="space-y-1">
                            <label class="block text-sm font-medium text-gray-700">Exercise Name</label>
                            <input type="text" name="entries[${exerciseCount}].exerciseName" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
                        </div>

                        <div class="grid grid-cols-2 gap-4">
                            <div class="space-y-1">
                                <label class="block text-sm font-medium text-gray-700">Sets</label>
                                <input type="number" name="entries[${exerciseCount}].sets" required min="1" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
                            </div>

                            <div class="space-y-1">
                                <label class="block text-sm font-medium text-gray-700">Type</label>
                                <select name="entries[${exerciseCount}].type" class="exercise-type mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" onchange="toggleExerciseFields(this)">
                                    <option value="reps">Repetitions</option>
                                    <option value="duration">Duration</option>
                                </select>
                            </div>
                        </div>

                        <div class="grid grid-cols-2 gap-4">
                            <div class="reps-field space-y-1">
                                <label class="block text-sm font-medium text-gray-700">Reps</label>
                                <input type="number" name="entries[${exerciseCount}].reps" min="1" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
                            </div>

                            <div class="duration-field space-y-1 hidden">
                                <label class="block text-sm font-medium text-gray-700">Duration (seconds)</label>
                                <input type="number" name="entries[${exerciseCount}].durationSeconds" min="1" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
                            </div>

                            <div class="space-y-1">
                                <label class="block text-sm font-medium text-gray-700">Weight (kg)</label>
                                <input type="number" name="entries[${exerciseCount}].weight" step="0.1" min="0" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
                            </div>
                        </div>

                        <div class="space-y-1">
                            <label class="block text-sm font-medium text-gray-700">Notes</label>
                            <textarea name="entries[${exerciseCount}].notes" rows="2" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
                        </div>
                    </div>
                `;

                container.appendChild(newExercise);
            });

            function toggleExerciseFields(selectElement) {
                const exerciseEntry = selectElement.closest('.exercise-entry');
                const repsField = exerciseEntry.querySelector('.reps-field');
                const durationField = exerciseEntry.querySelector('.duration-field');
                
                if (selectElement.value === 'reps') {
                    repsField.classList.remove('hidden');
                    durationField.classList.add('hidden');
                    repsField.querySelector('input').required = true;
                    durationField.querySelector('input').required = false;
                    durationField.querySelector('input').value = '';
                } else {
                    repsField.classList.add('hidden');
                    durationField.classList.remove('hidden');
                    repsField.querySelector('input').required = false;
                    durationField.querySelector('input').required = true;
                    repsField.querySelector('input').value = '';
                }
            }
            
            // Initialize all exercise type selects on page load
            document.addEventListener('DOMContentLoaded', function() {
                document.querySelectorAll('.exercise-type').forEach(function(select) {
                    toggleExerciseFields(select);
                });
            });
        </script>
    }
}

templ ExerciseEntry(index int, entry *store.WorkoutEntry) {
    <div class="bg-gray-50 p-4 rounded-md relative exercise-entry">
        if index > 0 {
            <button type="button" class="absolute top-2 right-2 text-gray-400 hover:text-red-500" onclick="this.parentElement.remove()">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </button>
        }
        <div class="space-y-4">
            <input type="hidden" name={ "entries[" + strconv.Itoa(index) + "].orderIndex" } value={ strconv.Itoa(index) } />
            
            <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Exercise Name</label>
                <input 
                    type="text" 
                    name={ "entries[" + strconv.Itoa(index) + "].exerciseName" } 
                    required 
                    if entry != nil {
                        value={ entry.ExerciseName }
                    }
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" 
                />
            </div>
            
            <div class="grid grid-cols-2 gap-4">
                <div class="space-y-1">
                    <label class="block text-sm font-medium text-gray-700">Sets</label>
                    <input 
                        type="number" 
                        name={ "entries[" + strconv.Itoa(index) + "].sets" } 
                        required 
                        min="1" 
                        if entry != nil {
                            value={ strconv.Itoa(entry.Sets) }
                        }
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" 
                    />
                </div>
                
                <div class="space-y-1">
                    <label class="block text-sm font-medium text-gray-700">Type</label>
                    <select 
                        name={ "entries[" + strconv.Itoa(index) + "].type" } 
                        class="exercise-type mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" 
                        onchange="toggleExerciseFields(this)"
                    >
                        <option 
                            value="reps"
                            if entry == nil || entry.Reps != nil {
                                selected
                            }
                        >Repetitions</option>
                        <option 
                            value="duration"
                            if entry != nil && entry.DurationSeconds != nil {
                                selected
                            }
                        >Duration</option>
                    </select>
                </div>
            </div>
            
            <div class="grid grid-cols-2 gap-4">
                <div class="reps-field space-y-1">
                    <label class="block text-sm font-medium text-gray-700">Reps</label>
                    <input 
                        type="number" 
                        name={ "entries[" + strconv.Itoa(index) + "].reps" } 
                        min="1" 
                        if entry != nil && entry.Reps != nil {
                            value={ strconv.Itoa(*entry.Reps) }
                            required
                        }
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" 
                    />
                </div>
                
                <div class="duration-field space-y-1">
                    <label class="block text-sm font-medium text-gray-700">Duration (seconds)</label>
                    <input 
                        type="number" 
                        name={ "entries[" + strconv.Itoa(index) + "].durationSeconds" } 
                        min="1" 
                        if entry != nil && entry.DurationSeconds != nil {
                            value={ strconv.Itoa(*entry.DurationSeconds) }
                            required
                        }
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" 
                    />
                </div>
                
                <div class="space-y-1">
                    <label class="block text-sm font-medium text-gray-700">Weight (kg)</label>
                    <input 
                        type="number" 
                        name={ "entries[" + strconv.Itoa(index) + "].weight" } 
                        step="0.1" 
                        min="0" 
                        if entry != nil && entry.Weight != nil {
                            value={ strconv.FormatFloat(float64(*entry.Weight), 'f', 1, 64) }
                        }
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" 
                    />
                </div>
            </div>
            
            <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Notes</label>
                <textarea 
                    name={ "entries[" + strconv.Itoa(index) + "].notes" } 
                    rows="2" 
                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                >
                    if entry != nil {
                        { entry.Notes }
                    }
                </textarea>
            </div>
        </div>
    </div>
}
